{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The Azure location of the AKS resource."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "defaultValue": "[concat(parameters('resourceName'), '-dns')]",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskType": {
            "type": "string",
            "defaultValue": "Ephemeral",
            "allowedValues": [
                "Ephemeral",
                "Managed"
            ]
        },
        "osDiskSizeGB": {
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 1023,
            "type": "int",
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            }
        },
        "agentCount": {
            "defaultValue": 3,
            "minValue": 1,
            "maxValue": 50,
            "type": "int",
            "metadata": {
                "description": "The number of agent nodes for the cluster. Production workloads have a recommended minimum of 3."
            }
        },
        "agentCountMax": {
            "defaultValue": 0,
            "type": "int",
            "metadata": {
                "description": "The Max number of agent nodes for the cluster, with autoscaller"
            }
        },
        "agentVMSize": {
            "defaultValue": "Standard_DS2_v2",
            "type": "string",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "kubernetesVersion": {
            "defaultValue": "1.19.3",
            "type": "string",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "networkPlugin": {
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "defaultValue": "azure",
            "type": "string",
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "networkPolicy": {
            "allowedValues": [
                "calico",
                "azure",
                ""
            ],
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "maxPods": {
            "defaultValue": 120,
            "type": "int",
            "metadata": {
                "description": "Maximum number of pods that can run on a node."
            }
        },
        "enableRBAC": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Whether to enable Kubernetes Role-Based Access Control."
            }
        },
        "podSecurityPolicy": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "(PREVIEW) Whether to enable Kubernetes Pod security policy."
            }
        },
        "privateCluster": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Whether to create the cluster as a private cluster or not."
            }
        },
        "dnsZoneRG": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Azure DNS Zone RG (add permissions)"
            }
        },
        "dnsZoneName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Azure DNS Zone name (add permissions)"
            }
        },
        "createVNET": {
            "type": "bool",
            "defaultValue": false
        },
        "vnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.240.0.0/16",
            "metadata": {
                "description": "Address prefix"
            }
        },
        "vnetAksSubnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.240.0.0/17",
            "metadata": {
                "description": "Address prefix"
            }
        },
        "vnetInternalLBSubnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.240.128.0/24",
            "metadata": {
                "description": "Address prefix"
            }
        },
        "vnetAppGatewaySubnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.240.129.0/24",
            "metadata": {
                "description": "Address prefix"
            }
        },
        "vnetFirewallSubnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.240.130.0/26",
            "metadata": {
                "description": "Address prefix"
            }
        },
        "vnetFirewallPrivateIPAlways4": {
            "type": "string",
            "defaultValue": "10.240.130.4",
            "metadata": {
                "description": "Address prefix"
            }
        },
        "vnetOnPremSubnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.240.130.64/26",
            "metadata": {
                "description": "Address prefix"
            }
        },
        "serviceCidr": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges."
            }
        },
        "podCidr": {
            "type": "string",
            "defaultValue": "10.244.0.0/16",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign pod IPs when kubenet is used."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "defaultValue": "10.0.0.10",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "defaultValue": "172.17.0.1/16",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        "enable_aad": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "The Azure AD Tenant where the cluster will reside"
            }
        },
        "aad_tenant_id": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Alternate aad tenant (optional)"
            }
        },
        "applicationGateways_sku": {
            "defaultValue": "",
            "allowedValues": [
                "Standard_v2",
                "WAF_v2",
                ""
            ],
            "type": "string",
            "metadata": {
                "description": "The sku of the Application Gateway. Default: WAF_v2 (Detection mode). In order to further customize WAF, use azure portal or cli."
            }
        },
        "registries_sku": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "Basic",
                ""
            ]
        },
        "createOnPremGW": {
            "type": "bool",
            "defaultValue": false
        },
        "acrAdminUserEnabled": {
            "type": "bool",
            "defaultValue": false
        },
        "azureFirewalls": {
            "type": "bool",
            "defaultValue": false
        },
        "CloudServiceTag": {
            "type": "string",
            "metadata": {
                "description": "Service tags for Allowed firewall TCP outbound connections from AKS subnet"
            },
            "defaultValue": "*",
            "allowedValues": [
                "*",
                "AzureCloud.CentralUS",
                "AzureCloud.EastUS",
                "AzureCloud.EastUS2",
                "AzureCloud.UKNorth",
                "AzureCloud.UKSouth",
                "AzureCloud.UKSouth2",
                "AzureCloud.UKWest",
                "AzureCloud.WestEurope",
                "AzureCloud.NorthEurope",
                "AzureCloud.WestUS",
                "AzureCloud.WestUS2",
                "AzureCloud.WestCentralUS"
            ]
        },
        "omsagent": {
            "type": "bool",
            "defaultValue": false
        }
    },
    "variables": {
        "acrName": "[concat(replace(parameters('resourceName'),'-', ''), 'acr')]",
        "vnetName": "[concat(parameters('resourceName'), '-vnet')]",
        "firewallName": "[concat(parameters('resourceName'), '-fw')]",
        "workspaceName": "[concat(parameters('resourceName'), '-workspace')]",
        "vnetAppGatewaySubnet": {
            "name": "AppGwIngressSubnet",
            "properties": {
                "addressPrefix": "[parameters('vnetAppGatewaySubnetAddressPrefix')]"
            }
        },
        "vnetFirewallSubnet": {
            "name": "AzureFirewallSubnet",
            "properties": {
                "addressPrefix": "[parameters('vnetFirewallSubnetAddressPrefix')]"
            }
        },
        "vnetOnPremSubnet": {
            "name": "GatewaySubnet",
            "properties": {
                "addressPrefix": "[parameters('vnetOnPremSubnetAddressPrefix')]"
            }
        },
        "vnetAksSubnetName": "AgentNodePoolsSubnet",
        "default_subnets": [
            {
                "name": "[variables('vnetAksSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('vnetAksSubnetAddressPrefix')]"
                }
            },
            {
                "name": "InternalLBSubnet",
                "properties": {
                    "addressPrefix": "[parameters('vnetInternalLBSubnetAddressPrefix')]"
                }
            }
        ],
        "default_plus_appgw_subnets": "[if (not(empty(parameters('applicationGateways_sku'))), concat(array(variables('default_subnets')),array(variables('vnetAppGatewaySubnet'))), array(variables('default_subnets')))]",
        "default_plus_appgw_fw_subnets": "[if (parameters('azureFirewalls'), concat(array(variables('default_plus_appgw_subnets')),array(variables('vnetFirewallSubnet'))), array(variables('default_plus_appgw_subnets')))]",
        "default_plus_appgw_fw_onprem_subnets": "[if (parameters('createOnPremGW'), concat(array(variables('default_plus_appgw_fw_subnets')),array(variables('vnetOnPremSubnet'))), array(variables('default_plus_appgw_fw_subnets')))]",
        "aadProfile": {
            "managed": true,
            "tenantID": "[parameters('aad_tenant_id')]"
        },
        "routeFwTableName": "[concat(parameters('resourceName'), '-route-fw')]",
        "msiIdentityName": "[concat(replace(parameters('resourceName'),'-', ''),'ingresIdentity')]",
        "msiIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('msiIdentityName'))]",
        "applicationGatewayName": "[concat(parameters('resourceName'), '-appgw' )]",
        "applicationGatewayPublicIpName": "[concat(parameters('resourceName'), '-appgw-ip')]",
        "firewallPublicIpName": "[concat(parameters('resourceName'), '-fw-ip')]",
        "webApplicationFirewallConfiguration": {
            "enabled": "true",
            "firewallMode": "Detection"
        },
        "autoScale": "[not(lessOrEquals(parameters('agentCountMax'),  parameters('agentCount')))]",
        "autoScaleProfile": {
            "minCount": "[parameters('agentCount')]",
            "maxCount": "[parameters('agentCountMax')]"
        },
        "nodepool1Profile": {
            "name": "nodepool1",
            "mode": "System",
            "osDiskType": "[parameters('osDiskType')]",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[parameters('agentCount')]",
            "vmSize": "[parameters('agentVMSize')]",
            "osType": "Linux",
            "vnetSubnetID": "[if(parameters('createVNET'), resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vnetAksSubnetName')), json('null'))]",
            "maxPods": "[parameters('maxPods')]",
            "type": "VirtualMachineScaleSets",
            "enableAutoScaling": "[variables('autoScale')]"
        },
        "identity_user": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
                "[variables('msiIdentityId')]": {
                    "clientId": "aa",
                    "principalId": "bb"
                }
            }
        },
        "identity_system": {
            "type": "SystemAssigned"
        },
        "readerRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "networkContributorRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
        "appGwContributorRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "dnsZoneContributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
        "AcrPullRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "managedIdentityOperatorRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'f1a07417-d97a-45cb-824c-7a7467783830')]"
    },
    "resources": [
        {
            "condition": "[not(and( empty(parameters('dnsZoneRG')), empty(parameters('applicationGateways_sku'))))]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('msiIdentityName')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "condition": "[not(empty(parameters('registries_sku')))]",
            "name": "[variables('acrName')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2017-10-01",
            "location": "[parameters('location')]",
            "comments": "Container registry for storing docker images",
            "tags": {
                "displayName": "Container Registry",
                "container.registry": "[variables('acrName')]"
            },
            "sku": {
                "name": "[parameters('registries_sku')]"
            },
            "properties": {
                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]"
            }
        },
        {
            "condition": "[parameters('createVNET')]",
            "apiVersion": "2019-04-01",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetAddressPrefix')]"
                    ]
                },
                "subnets": "[variables('default_plus_appgw_fw_onprem_subnets')]"
            }
        },
        {
            "condition": "[parameters('azureFirewalls')]",
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('routeFwTableName')]",
            "apiVersion": "2019-04-01",
            "location": "[parameters('location')]",
            "properties": {
                "routes": [
                    {
                        "name": "AKSNodesEgress",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[parameters('vnetFirewallPrivateIPAlways4')]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('azureFirewalls')]",
            "type": "Microsoft.Resources/deployments",
            "name": "AddDefaultFirewallRouteToAKSSubnet",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "apiVersion": "2019-04-01",
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "name": "[concat(variables('vnetName'), '/', variables('vnetAksSubnetName'))]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "addressPrefix": "[parameters('vnetAksSubnetAddressPrefix')]",
                                "routeTable": {
                                    "id": "[resourceId('Microsoft.Network/routeTables', variables('routeFwTableName'))]"
                                }
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/routeTables', variables('routeFwTableName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
            ]
        },
        {
            "condition": "[parameters('azureFirewalls')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('firewallPublicIpName')]",
            "apiVersion": "2018-08-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
            }
        },
        {
            "condition": "[parameters('azureFirewalls')]",
            "apiVersion": "2019-04-01",
            "type": "Microsoft.Network/azureFirewalls",
            "name": "[variables('firewallName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('firewallPublicIpName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat('IpConf', '1')]",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnetName'), variables('vnetFirewallSubnet').name)]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('firewallPublicIpName'))]"
                            }
                        }
                    }
                ],
                "threatIntelMode": "Alert",
                "applicationRuleCollections": [
                    {
                        "name": "clusterRc1",
                        "properties": {
                            "priority": 101,
                            "action": {
                                "type": "Allow"
                            },
                            "rules": [
                                {
                                    "name": "MicrosoftServices",
                                    "protocols": [
                                        {
                                            "port": 443,
                                            "protocolType": "Https"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "[concat('*.hcp.', parameters('location'), '.azmk8s.io')]",
                                        "mcr.microsoft.com",
                                        "*.data.mcr.microsoft.com",
                                        "management.azure.com",
                                        "login.microsoftonline.com",
                                        "packages.microsoft.com",
                                        "acs-mirror.azureedge.net"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ]
                                },
                                {
                                    "name": "UbuntuOS",
                                    "protocols": [
                                        {
                                            "port": 80,
                                            "protocolType": "Http"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "security.ubuntu.com",
                                        "azure.archive.ubuntu.com",
                                        "changelogs.ubuntu.com"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ]
                                },
                                {
                                    "name": "Monitor",
                                    "protocols": [
                                        {
                                            "port": 443,
                                            "protocolType": "Https"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "dc.services.visualstudio.com",
                                        "*.ods.opinsights.azure.com",
                                        "*.oms.opinsights.azure.com",
                                        "*.monitoring.azure.com"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ]
                                },
                                {
                                    "name": "AzurePolicy",
                                    "protocols": [
                                        {
                                            "port": 443,
                                            "protocolType": "Https"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "data.policy.core.windows.net",
                                        "store.policy.core.windows.net",
                                        "gov-prod-policy-data.trafficmanager.net",
                                        "raw.githubusercontent.com",
                                        "dc.services.visualstudio.com"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "networkRuleCollections": [
                    {
                        "name": "netRc1",
                        "properties": {
                            "priority": 100,
                            "action": {
                                "type": "Allow"
                            },
                            "rules": [
                                {
                                    "name": "ControlPlaneTCP",
                                    "protocols": [
                                        "TCP"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ],
                                    "destinationAddresses": [
                                        "[parameters('CloudServiceTag')]"
                                    ],
                                    "destinationPorts": [
                                        "9000", /* For tunneled secure communication between the nodes and the control plane. */
                                        "22"
                                    ]
                                },
                                {
                                    "name": "ControlPlaneUDP",
                                    "protocols": [
                                        "UDP"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ],
                                    "destinationAddresses": [
                                        "[parameters('CloudServiceTag')]"
                                    ],
                                    "destinationPorts": [
                                        "1194" /* For tunneled secure communication between the nodes and the control plane. */
                                    ]
                                },
                                {
                                    "name": "NetworkTimeProtocol",
                                    "protocols": [
                                        "UDP"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ],
                                    "destinationAddresses": [
                                        "ntp.ubuntu.com"
                                    ],
                                    "destinationPorts": [
                                        "123"
                                    ]
                                },
                                {
                                    "name": "AzureMonitorForContainers",
                                    "protocols": [
                                        "TCP"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('vnetAksSubnetAddressPrefix')]"
                                    ],
                                    "destinationAddresses": [
                                        "AzureMonitor"
                                    ],
                                    "destinationPorts": [
                                        "443"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[not(empty(parameters('applicationGateways_sku')))]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('applicationGatewayPublicIpName')]",
            "apiVersion": "2018-08-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "condition": "[not(empty(parameters('applicationGateways_sku')))]",
            "type": "Microsoft.Network/applicationGateways",
            "name": "[variables('applicationGatewayName')]",
            "apiVersion": "2018-08-01",
            "location": "[parameters('location')]",
            "tags": {
                "managed-by-k8s-ingress": "true"
            },
            "properties": {
                "sku": {
                    "name": "[parameters('applicationGateways_sku')]",
                    "tier": "[parameters('applicationGateways_sku')]",
                    "capacity": 2
                },
                "frontendIPConfigurations": [
                    {
                        "name": "appGatewayFrontendIP",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('applicationGatewayPublicIpName'))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "httpPort",
                        "properties": {
                            "Port": 80
                        }
                    },
                    {
                        "name": "httpsPort",
                        "properties": {
                            "Port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "bepool",
                        "properties": {
                            "backendAddresses": []
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "setting",
                        "properties": {
                            "port": 80,
                            "protocol": "Http"
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "httpListener",
                        "properties": {
                            "protocol": "Http",
                            "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), 'httpPort')]"
                            },
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('applicationGatewayName'), 'appGatewayFrontendIP')]"
                            }
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "name": "rule1",
                        "properties": {
                            "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), 'httpListener')]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGatewayName'), 'bepool')]"
                            },
                            "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGatewayName'), 'setting')]"
                            }
                        }
                    }
                ],
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnetName'), variables('vnetAppGatewaySubnet').name)]"
                            }
                        }
                    }
                ],
                "webApplicationFirewallConfiguration": "[if(equals(parameters('applicationGateways_sku'), 'WAF_v2'), variables('webApplicationFirewallConfiguration'), json('null'))]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('applicationGatewayPublicIpName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
            ]
        },
        {
            "condition": "[parameters('omsagent')]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[variables('workspaceName')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "name": "[parameters('resourceName')]",
            "apiVersion": "2020-12-01",
            "location": "[parameters('location')]",
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "aadProfile": "[if ( parameters('enable_aad'), variables('aadProfile'), json('null') )]",
                "addonProfiles": {
                    "omsagent": {
                        "enabled": "[parameters('omsagent')]",
                        "config": {
                            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
                        }
                    }
                },
                "apiServerAccessProfile": {
                    "enablePrivateCluster": "[parameters('privateCluster')]"
                },
                "agentPoolProfiles": "[if (variables('autoScale'), array (union(variables('nodepool1Profile'), variables('autoScaleProfile'))), array(variables('nodepool1Profile')))]",
                "enablePodSecurityPolicy": "[parameters('podSecurityPolicy')]",
                "networkProfile": {
                    "loadBalancerSku": "standard",
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "networkPolicy": "[parameters('networkPolicy')]",
                    "podCidr": "[parameters('podCidr')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                }
            },
            "identity": "[if (not(and( empty(parameters('dnsZoneRG')), empty(parameters('applicationGateways_sku')))),  variables('identity_user'),  variables('identity_system'))]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Resources/deployments/', 'NetworkRoleAssignmentForKubenetesSPN')]",
                "[concat('Microsoft.OperationalInsights/workspaces/', variables('workspaceName'))]",
                "[variables('msiIdentityId')]"
            ]
        },
        {
            "condition": "[parameters('createVNET')]",
            "type": "Microsoft.Resources/deployments",
            "name": "NetworkRoleAssignmentForKubenetesSPN",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets/providers/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[concat(variables('vnetName'), '/', variables('vnetAksSubnetName'),'/Microsoft.Authorization/', guid(resourceGroup().id, 'aksvnetaccess'))]",
                            "properties": {
                                "roleDefinitionId": "[variables('networkContributorRole')]",
                                "principalId": "[reference(variables('msiIdentityId'), '2018-11-30').principalId]"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
            ]
        },
        {
            "condition": "[not(empty(parameters('registries_sku')))]",
            "type": "Microsoft.Resources/deployments",
            "name": "ACRRoleAssignmentForKubenetesSPN",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[concat(variables('acrName'), '/Microsoft.Authorization/', guid(resourceGroup().id, 'identityacraccess'))]",
                            "properties": {
                                "roleDefinitionId": "[variables('AcrPullRole')]",
                                "principalId": "[reference(variables('msiIdentityId'), '2018-11-30').principalId]"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Microsoft.ContainerRegistry/registries/', variables('acrName'))]"
            ]
        },
        {
            "condition": "[not(empty(parameters('applicationGateways_sku')))]",
            "type": "Microsoft.Resources/deployments",
            "name": "ClusterRoleAssignmentDeploymentForAppGW",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/applicationgateways/providers/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[concat(variables('applicationGatewayName'), '/Microsoft.Authorization/', guid(resourceGroup().id, 'identityappgwaccess'))]",
                            "properties": {
                                "roleDefinitionId": "[variables('appGwContributorRole')]",
                                "principalId": "[if (empty(parameters('applicationGateways_sku')), '', reference(variables('msiIdentityId'), '2018-11-30').principalId)]",
                                "scope": "[resourceId('Microsoft.Network/applicationgateways', variables('applicationGatewayName'))]"
                            }
                        },
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[guid(resourceGroup().id, 'identityappgwrgaccess')]",
                            "properties": {
                                "roleDefinitionId": "[variables('readerRole')]",
                                "principalId": "[if (empty(parameters('applicationGateways_sku')), '', reference(variables('msiIdentityId'), '2018-11-30').principalId)]",
                                "scope": "[resourceGroup().id]"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/applicationgateways/', variables('applicationGatewayName'))]",
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('msiIdentityName'))]"
            ]
        },
        {
            "condition": "[or(not(empty(parameters('dnsZoneRG'))), not(empty(parameters('applicationGateways_sku'))) ) ]",
            "type": "Microsoft.Resources/deployments",
            "name": "ClusterRoleAssignmentDeploymentForDNSZone",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[concat(variables('msiIdentityName'), '/Microsoft.Authorization/', guid(resourceGroup().id, 'aksidentityaccess'))]",
                            "properties": {
                                "roleDefinitionId": "[variables('managedIdentityOperatorRole')]",
                                "principalId": "[reference(variables('msiIdentityId'), '2018-11-30').principalId]",
                                "scope": "[variables('msiIdentityId')]",
                                "principalType": "ServicePrincipal"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('msiIdentityName'))]",
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]"
            ]
        },
        {
            "condition": "[not(empty(parameters('dnsZoneRG')))]",
            "resourceGroup": "[parameters('dnsZoneRG')]",
            "type": "Microsoft.Resources/deployments",
            "name": "ClusterRoleAssignmentDeploymentForDNSZoneinRG",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/dnsZones/providers/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[concat(parameters('dnsZoneName'), '/Microsoft.Authorization/', guid(resourceGroup().id, 'identitydnsaccess'))]",
                            "properties": {
                                "roleDefinitionId": "[variables('dnsZoneContributor')]",
                                "principalId": "[if (empty(parameters('dnsZoneRG')), '', reference(variables('msiIdentityId'), '2018-11-30').principalId)]",
                                "scope": "[resourceId(parameters('dnsZoneRG'), 'Microsoft.Network/dnsZones', parameters('dnsZoneName'))]"
                            }
                        },
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2017-05-01",
                            "name": "[guid(resourceGroup().id, 'identitydnsrgaccess')]",
                            "properties": {
                                "roleDefinitionId": "[variables('readerRole')]",
                                "principalId": "[if (empty(parameters('dnsZoneRG')), '', reference(variables('msiIdentityId'), '2018-11-30').principalId)]",
                                "scope": "[concat(subscription().id, '/resourceGroups/', parameters('dnsZoneRG'))]"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('msiIdentityName'))]",
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]"
            ]
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).fqdn]"
        },
        "applicationGatewayName": {
            "type": "string",
            "value": "[if(empty(parameters('applicationGateways_sku')),'-',variables('applicationGatewayName'))]"
        },
        "msiIdentityResourceId": {
            "type": "string",
            "value": "[if( and( empty(parameters('dnsZoneRG')), empty(parameters('applicationGateways_sku'))),'-',variables('msiIdentityId'))]"
        },
        "msiIdentityClientId": {
            "type": "string",
            "value": "[if(and( empty(parameters('dnsZoneRG')), empty(parameters('applicationGateways_sku'))),'-',reference(variables('msiIdentityId'), '2018-11-30').clientId)]"
        }
    }
}