{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "resourceName": {
      "type": "string"
    },
    "dnsPrefix": {
      "type": "string",
      "defaultValue": "[format('{0}-dns', parameters('resourceName'))]"
    },
    "kubernetesVersion": {
      "type": "string",
      "defaultValue": "1.19.3"
    },
    "enable_aad": {
      "type": "bool",
      "defaultValue": false
    },
    "aad_tenant_id": {
      "type": "string",
      "defaultValue": ""
    },
    "omsagent": {
      "type": "bool",
      "defaultValue": false
    },
    "privateCluster": {
      "type": "bool",
      "defaultValue": false
    },
    "custom_vnet": {
      "type": "bool",
      "defaultValue": false
    },
    "osDiskType": {
      "type": "string",
      "defaultValue": "Epthemeral"
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2"
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 0
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 3
    },
    "agentCountMax": {
      "type": "int",
      "defaultValue": 0
    },
    "maxPods": {
      "type": "int",
      "defaultValue": 30
    },
    "networkPlugin": {
      "type": "string",
      "defaultValue": "azure"
    },
    "networkPolicy": {
      "type": "string",
      "defaultValue": ""
    },
    "podCidr": {
      "type": "string",
      "defaultValue": "10.244.0.0/16"
    },
    "serviceCidr": {
      "type": "string",
      "defaultValue": "10.0.0.0/16"
    },
    "dnsServiceIP": {
      "type": "string",
      "defaultValue": "10.0.0.10"
    },
    "dockerBridgeCidr": {
      "type": "string",
      "defaultValue": "172.17.0.1/16"
    },
    "registries_sku": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/8"
    },
    "vnetAksSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.240.0.0/16"
    },
    "vnetAppGatewaySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.2.0.0/16"
    },
    "vnetFirewallSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.241.130.0/26"
    },
    "serviceEndpoints": {
      "type": "array",
      "defaultValue": []
    },
    "azureFirewalls": {
      "type": "bool",
      "defaultValue": false
    },
    "ingressApplicationGateway": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAzureRBAC": {
      "type": "bool",
      "defaultValue": false
    },
    "upgradeChannel": {
      "type": "string",
      "defaultValue": ""
    },
    "gitops": {
      "type": "string",
      "defaultValue": ""
    },
    "authorizedIPRanges": {
      "type": "array",
      "defaultValue": []
    },
    "enablePrivateCluster": {
      "type": "bool",
      "defaultValue": false
    },
    "retentionInDays": {
      "type": "int",
      "defaultValue": 30
    }
  },
  "functions": [],
  "variables": {
    "user_identity": "[variables('create_vnet')]",
    "user_identity_name": "[format('{0}uai', parameters('resourceName'))]",
    "acrName": "[format('{0}acr', replace(parameters('resourceName'), '-', ''))]",
    "AcrPullRole": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
    "firewallIP": "10.241.130.4",
    "create_vnet": "[or(or(parameters('custom_vnet'), parameters('azureFirewalls')), not(empty(parameters('serviceEndpoints'))))]",
    "vnetName": "[format('{0}-vnet', parameters('resourceName'))]",
    "appgw_subnet_name": "appgw-sn",
    "appgw_subnet": {
      "name": "[variables('appgw_subnet_name')]",
      "properties": {
        "addressPrefix": "[parameters('vnetAppGatewaySubnetAddressPrefix')]"
      }
    },
    "fw_subnet_name": "AzureFirewallSubnet",
    "fw_subnet": {
      "name": "[variables('fw_subnet_name')]",
      "properties": {
        "addressPrefix": "[parameters('vnetFirewallSubnetAddressPrefix')]"
      }
    },
    "aks_subnet_name": "aks-sn",
    "aks_subnet": "[if(parameters('azureFirewalls'), createObject('name', variables('aks_subnet_name'), 'properties', createObject('addressPrefix', parameters('vnetAksSubnetAddressPrefix'), 'routeTable', createObject('id', resourceId('Microsoft.Network/routeTables', variables('routeFwTableName'))))), createObject('name', variables('aks_subnet_name'), 'properties', createObject('addressPrefix', parameters('vnetAksSubnetAddressPrefix'), 'serviceEndpoints', parameters('serviceEndpoints'))))]",
    "subnets_1": "[if(parameters('azureFirewalls'), concat(array(variables('aks_subnet')), array(variables('fw_subnet'))), array(variables('aks_subnet')))]",
    "final_subnets": "[if(parameters('ingressApplicationGateway'), concat(array(variables('subnets_1')), array(variables('appgw_subnet'))), array(variables('subnets_1')))]",
    "networkContributorRole": "[resourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
    "routeFwTableName": "[format('{0}-fw-udr', parameters('resourceName'))]",
    "firewallPublicIpName": "[format('{0}-fw-ip', parameters('resourceName'))]",
    "fw_name": "[format('{0}-fw', parameters('resourceName'))]",
    "appgw_name": "[format('{0}-appgw', parameters('resourceName'))]",
    "aks_identity_user": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('user_identity_name'))]": {}
      }
    },
    "aks_identity_system": {
      "type": "SystemAssigned"
    },
    "autoScale": "[greater(parameters('agentCountMax'), parameters('agentCount'))]",
    "agentPoolProfiles": {
      "name": "nodepool1",
      "mode": "System",
      "osDiskType": "[parameters('osDiskType')]",
      "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
      "count": "[parameters('agentCount')]",
      "vmSize": "[parameters('agentVMSize')]",
      "osType": "Linux",
      "vnetSubnetID": "[if(variables('create_vnet'), format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('aks_subnet_name')), null())]",
      "maxPods": "[parameters('maxPods')]",
      "type": "VirtualMachineScaleSets",
      "enableAutoScaling": "[variables('autoScale')]"
    },
    "autoScaleProfile": {
      "minCount": "[if(variables('autoScale'), parameters('agentCount'), null())]",
      "maxCount": "[if(variables('autoScale'), parameters('agentCountMax'), null())]"
    },
    "addon_agic": "[if(variables('create_vnet'), createObject('ingressApplicationGateway', createObject('enabled', true(), 'config', createObject('applicationGatewayName', variables('appgw_name'), 'subnetID', format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('appgw_subnet_name'))))), createObject('ingressApplicationGateway', createObject('enabled', true(), 'config', createObject('applicationGatewayName', variables('appgw_name'), 'subnetCIDR', parameters('vnetAppGatewaySubnetAddressPrefix')))))]",
    "addon_gitops": {
      "gitops": {
        "enabled": true
      }
    },
    "addon_monitoring": {
      "omsagent": {
        "enabled": true,
        "config": {
          "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]"
        }
      }
    },
    "aks_properties": {
      "kubernetesVersion": "[parameters('kubernetesVersion')]",
      "enableRBAC": true,
      "dnsPrefix": "[parameters('dnsPrefix')]",
      "aadProfile": "[if(parameters('enable_aad'), createObject('managed', true(), 'enableAzureRBAC', parameters('enableAzureRBAC'), 'tenantID', parameters('aad_tenant_id')), null())]",
      "apiServerAccessProfile": "[if(not(empty(parameters('authorizedIPRanges'))), createObject('authorizedIPRanges', parameters('authorizedIPRanges')), createObject('enablePrivateCluster', parameters('enablePrivateCluster')))]",
      "agentPoolProfiles": "[if(variables('autoScale'), array(union(variables('agentPoolProfiles'), variables('autoScaleProfile'))), array(variables('agentPoolProfiles')))]",
      "networkProfile": {
        "loadBalancerSku": "standard",
        "networkPlugin": "[parameters('networkPlugin')]",
        "networkPolicy": "[parameters('networkPolicy')]",
        "podCidr": "[parameters('podCidr')]",
        "serviceCidr": "[parameters('serviceCidr')]",
        "dnsServiceIP": "[parameters('dnsServiceIP')]",
        "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
      }
    },
    "aks_properties1": "[if(empty(parameters('upgradeChannel')), variables('aks_properties'), union(variables('aks_properties'), createObject('autoUpgradeProfile', createObject('upgradeChannel', parameters('upgradeChannel')))))]",
    "aks_properties2": "[if(or(parameters('ingressApplicationGateway'), parameters('omsagent')), union(variables('aks_properties1'), createObject('addonProfiles', if(and(parameters('ingressApplicationGateway'), parameters('omsagent')), union(variables('addon_monitoring'), variables('addon_agic')), if(parameters('omsagent'), variables('addon_monitoring'), variables('addon_agic'))))), variables('aks_properties1'))]",
    "buildInAKSRBACClusterAdmin": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b')]",
    "aks_law_name": "[format('{0}-workspace', parameters('resourceName'))]"
  },
  "resources": [
    {
      "condition": "[variables('user_identity')]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[variables('user_identity_name')]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[not(empty(parameters('registries_sku')))]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2017-10-01",
      "name": "[variables('acrName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('registries_sku')]"
      }
    },
    {
      "condition": "[not(empty(parameters('registries_sku')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]",
      "name": "[guid(resourceGroup().id, variables('acrName'))]",
      "properties": {
        "roleDefinitionId": "[variables('AcrPullRole')]",
        "principalType": "ServicePrincipal",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('resourceName'))).identityProfile.kubeletidentity.objectId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
        "[resourceId('Microsoft.ContainerService/managedClusters', parameters('resourceName'))]"
      ]
    },
    {
      "condition": "[variables('create_vnet')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-07-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": "[variables('final_subnets')]"
      }
    },
    {
      "condition": "[variables('create_vnet')]",
      "type": "Microsoft.Network/virtualNetworks/subnets/providers/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[format('{0}/{1}/Microsoft.Authorization/{2}', variables('vnetName'), variables('aks_subnet_name'), guid(resourceGroup().id, variables('aks_subnet_name')))]",
      "properties": {
        "roleDefinitionId": "[variables('networkContributorRole')]",
        "principalId": "[if(variables('user_identity'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('user_identity_name'))).principalId, null())]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('user_identity_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "condition": "[parameters('azureFirewalls')]",
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2019-04-01",
      "name": "[variables('routeFwTableName')]",
      "location": "[parameters('location')]",
      "properties": {
        "routes": [
          {
            "name": "AKSNodesEgress",
            "properties": {
              "addressPrefix": "0.0.0.0/1",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('firewallIP')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('azureFirewalls')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2018-08-01",
      "name": "[variables('firewallPublicIpName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4"
      }
    },
    {
      "condition": "[parameters('azureFirewalls')]",
      "type": "Microsoft.Network/azureFirewalls",
      "apiVersion": "2019-04-01",
      "name": "[variables('fw_name')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf1",
            "properties": {
              "subnet": {
                "id": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('fw_subnet_name'))]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('firewallPublicIpName'))]"
              }
            }
          }
        ],
        "threatIntelMode": "Alert",
        "applicationRuleCollections": [
          {
            "name": "clusterRc1",
            "properties": {
              "priority": 101,
              "action": {
                "type": "Allow"
              },
              "rules": [
                {
                  "name": "MicrosoftServices",
                  "protocols": [
                    {
                      "port": 443,
                      "protocolType": "Https"
                    }
                  ],
                  "targetFqdns": [
                    "[format('*.hcp.{0}.azmk8s.io', parameters('location'))]",
                    "mcr.microsoft.com",
                    "*.data.mcr.microsoft.com",
                    "management.azure.com",
                    "login.microsoftonline.com",
                    "packages.microsoft.com",
                    "acs-mirror.azureedge.net"
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ]
                },
                {
                  "name": "UbuntuOS",
                  "protocols": [
                    {
                      "port": 80,
                      "protocolType": "Http"
                    }
                  ],
                  "targetFqdns": [
                    "security.ubuntu.com",
                    "azure.archive.ubuntu.com",
                    "changelogs.ubuntu.com"
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ]
                },
                {
                  "name": "NetworkTimeProtocol",
                  "protocols": [
                    {
                      "port": 123
                    }
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ],
                  "targetFqdns": [
                    "ntp.ubuntu.com"
                  ]
                },
                {
                  "name": "Monitor",
                  "protocols": [
                    {
                      "port": 443,
                      "protocolType": "Https"
                    }
                  ],
                  "targetFqdns": [
                    "dc.services.visualstudio.com",
                    "*.ods.opinsights.azure.com",
                    "*.oms.opinsights.azure.com",
                    "*.monitoring.azure.com"
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ]
                },
                {
                  "name": "AzurePolicy",
                  "protocols": [
                    {
                      "port": 443,
                      "protocolType": "Https"
                    }
                  ],
                  "targetFqdns": [
                    "data.policy.core.windows.net",
                    "store.policy.core.windows.net",
                    "gov-prod-policy-data.trafficmanager.net",
                    "raw.githubusercontent.com",
                    "dc.services.visualstudio.com"
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ]
                }
              ]
            }
          }
        ],
        "networkRuleCollections": [
          {
            "name": "netRc1",
            "properties": {
              "priority": 100,
              "action": {
                "type": "Allow"
              },
              "rules": [
                {
                  "name": "ControlPlaneTCP",
                  "protocols": [
                    "TCP"
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ],
                  "destinationAddresses": [
                    "[format('AzureCloud.{0}', parameters('location'))]"
                  ],
                  "destinationPorts": [
                    "9000",
                    "22"
                  ]
                },
                {
                  "name": "ControlPlaneUDP",
                  "protocols": [
                    "UDP"
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ],
                  "destinationAddresses": [
                    "[format('AzureCloud.{0}', parameters('location'))]"
                  ],
                  "destinationPorts": [
                    "1194"
                  ]
                },
                {
                  "name": "AzureMonitorForContainers",
                  "protocols": [
                    "TCP"
                  ],
                  "sourceAddresses": [
                    "[parameters('vnetAksSubnetAddressPrefix')]"
                  ],
                  "destinationAddresses": [
                    "AzureMonitor"
                  ],
                  "destinationPorts": [
                    "443"
                  ]
                }
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('firewallPublicIpName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2020-12-01",
      "name": "[parameters('resourceName')]",
      "location": "[parameters('location')]",
      "properties": "[variables('aks_properties2')]",
      "identity": "[if(variables('user_identity'), variables('aks_identity_user'), variables('aks_identity_system'))]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('user_identity_name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableAzureRBAC'), false())]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('resourceName'))]",
      "name": "[guid(resourceGroup().id, 'aks_admin_role_assignment')]",
      "properties": {
        "roleDefinitionId": "[variables('buildInAKSRBACClusterAdmin')]",
        "principalType": "User",
        "principalId": "Struggling to get current user Id"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', parameters('resourceName'))]"
      ]
    },
    {
      "condition": "[parameters('omsagent')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[variables('aks_law_name')]",
      "location": "[parameters('location')]",
      "properties": {
        "retentionInDays": "[parameters('retentionInDays')]"
      }
    }
  ]
}